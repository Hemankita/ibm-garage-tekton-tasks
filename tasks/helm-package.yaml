apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: helm-package
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: js-image
        type: string
        default: node:11-stretch
      - name: tools-image
        type: string
        default: docker.io/garagecatalyst/ibmcloud-dev:1.0.8
      - name: namespace
        type: string
        default: dev
  volumes:
    - name: helm
      emptyDir: {}
  steps:
    - name: setup
      image: ${inputs.params.js-image}
      workingdir: ${inputs.resources.source.path}
      env:
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -x
          # Export project name, version, and build number to ./env-config
          npm run env | grep "^npm_package_name" | sed "s/npm_package_name/IMAGE_NAME/g"  > ./env-config
          npm run env | grep "^npm_package_version" | sed "s/npm_package_version/IMAGE_VERSION/g" >> ./env-config
          BUILD_NUMBER=`echo $PIPELINE_ID | awk -F 'run-' '{print $NF}'`
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> ./env-config
    - name: helm-chart-package
      image: ${inputs.params.tools-image}
      workingdir: ${inputs.resources.source.path}
      volumeMounts:
        - name: helm
          mountPath: /home/devops/.helm
      envFrom:
        - configMapRef:
            name: ibmcloud-config
        - configMapRef:
            name: artifactory-config
        - secretRef:
            name: artifactory-access
      env:
        - name: HOME
          value: /home/devops
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -x
          env | sort

          if [[ -z "${ARTIFACTORY_ENCRPT}" ]]; then
            echo "REGISTRY_NAMESPACE is required"
            exit 1
          fi

          . ./env-config

          export CHART_ROOT=$(find . -name chart)
          echo $CHART_ROOT

          export CHART=$(find . -name Chart\*)
          echo $CHART

          export CHART_NAME=$(cat $CHART | awk '/name:/ {print $2}')
          echo $CHART_NAME

          CHART_PATH="${CHART_ROOT}/${CHART_NAME}"

          if [[ -n "${BUILD_NUMBER}" ]]; then
            IMAGE_BUILD_VERSION="${IMAGE_VERSION}-${BUILD_NUMBER}"
          fi

          if [[ -z "${ARTIFACTORY_ENCRPT}" ]]; then
              echo "Encrption key not available for Jenkins pipeline, please add it to the artifactory-access"
              exit 1
          fi



          echo "Check if a Generic Local Repo has been created and retrieve the URL for it"
          export URL=$(curl -s -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X GET "${ARTIFACTORY_URL}/artifactory/api/repositories?type=LOCAL" | jq -r '.[0].url')
          echo ${URL}

          # Check if the URL is valid and we can continue
          if [ -n "${URL}" ]; then
              echo "Successfully read Repo ${URL}"
          else
              echo "No Repository Created"
              exit 1;
          fi;

          # Package Helm Chart
          helm package --version ${IMAGE_BUILD_VERSION} ${CHART_PATH}

          # Get the index and re index it with current Helm Chart
          curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRPT} -O "${URL}/${REGISTRY_NAMESPACE}/index.yaml"

          if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]]; then
              # Merge the chart index with the current index.yaml held in Artifactory
              echo "Merging Chart into index.yaml for Chart Repository"
              helm repo index . --url ${URL}/${REGISTRY_NAMESPACE} --merge index.yaml
          else
              # Dont Merge this is first time one is being created
              echo "Creating a new index.yaml for Chart Repository"
              rm index.yaml
              helm repo index . --url ${URL}/${REGISTRY_NAMESPACE}
          fi;

          # Persist the Helm Chart in Artifactory for us by ArgoCD
          curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRPT} -i -vvv -T ${CHART_NAME}-${IMAGE_BUILD_VERSION}.tgz "${URL}/${REGISTRY_NAMESPACE}/${CHART_NAME}-${IMAGE_BUILD_VERSION}.tgz"

          # Persist the Helm Chart in Artifactory for us by ArgoCD
          curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRPT} -i -vvv -T index.yaml "${URL}/${REGISTRY_NAMESPACE}/index.yaml"
